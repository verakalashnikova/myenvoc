package com.myenvoc.commons;

import java.util.Collections;
import java.util.List;

import javax.inject.Inject;

import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.base.Preconditions;
import com.google.common.base.Splitter;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.myenvoc.R;
import com.myenvoc.android.domain.GoogleImageSearchResponseResult;
import com.myenvoc.android.domain.GoolgeImageSearchResult;
import com.myenvoc.android.domain.MyWord;
import com.myenvoc.android.domain.MyWordContext;
import com.myenvoc.android.domain.TranEntry;
import com.myenvoc.android.domain.TranOfThisPart;
import com.myenvoc.android.domain.TranslationMeaning;
import com.myenvoc.android.domain.UserProfile;
import com.myenvoc.android.domain.WordNetSynset;
import com.myenvoc.android.domain.WordRef;
import com.myenvoc.android.service.user.UserService;
import com.myenvoc.android.ui.CustomAlertDialog;
import com.myenvoc.android.ui.dictionary.MyenvocHomeActivity;
import com.myenvoc.android.ui.user.SignInActivity;
import com.myenvoc.android.ui.user.SignInActivity.SignInType;

public class VocabularyUtils {

	private static final String TRANSLATIONS_SEPARATOR = "|";

	private static final Joiner TRAN_JOINER = Joiner.on(TRANSLATIONS_SEPARATOR);

	private static final Splitter TRAN_SPLITTER = Splitter.on(TRANSLATIONS_SEPARATOR);

	private static final String WARN_ANONYMOUS_USER = "warnAnonymousUser";

	private static final String TAG = VocabularyUtils.class.getName();

	private static Object playMutex = new Object();

	private static String currentWordBeingPronounced;

	@Inject
	private static UserService userService;

	private static final String[] EMPTY_STRINGS = {};
	private static final Function<WordRef, String> SYNONYMS_EXTRACTOR = new Function<WordRef, String>() {
		@Override
		public String apply(final WordRef ref) {
			return ref.getLemma();
		}
	};

	private static MediaPlayer player;

	public static MyWordContext convert(final WordNetSynset synset) {
		MyWordContext myWordContext = new MyWordContext();
		myWordContext.setDefinition(synset.getDefinition());
		myWordContext.setExample(synset.getExample());
		List<WordRef> synonyms = synset.getSynonyms();
		if (synonyms != null) {
			String synonymsString = Joiner.on(", ").join(Iterables.transform(synonyms, SYNONYMS_EXTRACTOR));
			myWordContext.setSynonyms(synonymsString);
		}
		myWordContext.setSynsetType(synset.getSynsetType());
		return myWordContext;
	}

	public static String getFlatTranslation(final TranslationMeaning translationMeaning) {
		if (translationMeaning.getEntry() == null) {
			return null;
		}
		TranEntry tranEntry = translationMeaning.getEntry().iterator().next();
		if (tranEntry.getData() == null) {
			return null;
		}
		TranOfThisPart part = tranEntry.getData().iterator().next();
		if (part.getT() == null) {
			if (part.getE() != null) {
				return part.getE().iterator().next();
			}
		} else {
			return part.getT().iterator().next();
		}
		return null;
	}

	public static List<GoogleImageSearchResponseResult> getGoogleImagesFromResponse(final GoolgeImageSearchResult goolgeImageSearchResult) {
		// TODO: analyze response status message
		if (goolgeImageSearchResult.getResponseData() == null || goolgeImageSearchResult.getResponseData().getResults().isEmpty()) {
			return Collections.emptyList();
		}
		return goolgeImageSearchResult.getResponseData().getResults();
	}

	/**
	 * This method should be defined on MyWord itself (OOP), but MyWord is
	 * autogenerated, thus can't change it.
	 * 
	 * @return
	 */
	public static MyWord addTranslation(final MyWord myWord, final String translation) {
		if (StringUtils.isEmpty(myWord.getTranslation())) {
			myWord.setTranslation(translation);
		} else {
			myWord.setTranslation(myWord.getTranslation() + TRANSLATIONS_SEPARATOR + translation);
		}
		return myWord;
	}

	public static boolean hasTranslation(final MyWord myWord, final String translation) {
		if (myWord.getTranslation() == null) {
			return false;
		}
		for (String tran : TRAN_SPLITTER.split(myWord.getTranslation())) {
			if (tran.equals(translation)) {
				return true;
			}
		}
		return false;
	}

	public static MyWord setTranslation(final MyWord myWord, final String translation, final int index) {
		List<String> translations = Lists.newArrayList(TRAN_SPLITTER.split(myWord.getTranslation()));
		translations.set(index, translation);
		myWord.setTranslation(TRAN_JOINER.join(translations));
		return myWord;
	}

	public static MyWord addContext(final MyWord myWord, final MyWordContext context) {
		List<MyWordContext> contexts = Lists.newArrayList(myWord.getContexts());

		contexts.add(context);
		myWord.setContexts(contexts);
		return myWord;
	}

	public static MyWord setContext(final MyWord myWord, final MyWordContext myWordContext, final int index) {
		myWord.getContexts().set(index, myWordContext);
		return myWord;
	}

	public static Iterable<String> getTranslations(final MyWord myWord) {
		String translationsEncoded = myWord.getTranslation();
		if (translationsEncoded != null) {
			return TRAN_SPLITTER.split(translationsEncoded);
		}

		return Collections.emptyList();
	}

	public static MyWord removeDefinitionAt(final MyWord myWord, final int index) {
		myWord.getContexts().remove(index);
		return myWord;
	}

	public static MyWord removeTranslationAt(final MyWord myWord, final int index) {
		List<String> translations = Lists.newArrayList(TRAN_SPLITTER.split(myWord.getTranslation()));
		translations.remove(index);
		myWord.setTranslation(TRAN_JOINER.join(translations));
		return myWord;
	}

	public static String getUserName(final UserProfile registeredUser) {
		String name = StringUtils.isNotEmpty(registeredUser.getFirstName()) ? registeredUser.getFirstName() : ""
				+ (StringUtils.isNotEmpty(registeredUser.getLastName()) ? registeredUser.getLastName() : "");

		if (!"".equals(name)) {
			return name;
		}

		if ("".equals(name) && StringUtils.isNotEmpty(registeredUser.getEmail())) {
			return registeredUser.getEmail();
		}

		return "User";
	}

	public static void warnAnonymousUser(final FragmentActivity activity, final OnClickListener onNegativeClickListener) {
		if (!userService.getUser().isAnonymous()) {
			return;
		}

		CustomAlertDialog.showDontShowAgainDialog(WARN_ANONYMOUS_USER, activity, R.string.pleaseSignIn, R.string.pleaseSignInText,
				R.string.signIn, R.string.continueLabel, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(final DialogInterface arg0, final int arg1) {
						Intent intent = new Intent(activity, SignInActivity.class);
						intent.putExtra(SignInType.TYPE, SignInType.SIGN_IN.name());
						activity.startActivity(intent);
					}
				}, onNegativeClickListener, onNegativeClickListener);
	}

	public static void playTranscription(final String word, final FragmentActivity context, final View pronunciationInProgress) {

		/** to prevent double submit, impatience. */
		synchronized (playMutex) {
			if (word.equals(currentWordBeingPronounced)) {
				return;
			}

			currentWordBeingPronounced = word;

		}

		Uri myUri = Uri.parse(CommonUtils.encodeQueryString(Configuration.pronounceResource + word));

		if (pronunciationInProgress != null) {
			pronunciationInProgress.setVisibility(View.VISIBLE);
		}

		final Handler handler = MyenvocHomeActivity.getHandler();
		ExecutorFactory.getInstance().execute(ThreadPoolExecutor.TP_EXECUTOR_DEFAULT_PARAMETERS, new MyAsyncTask<Uri, Void>() {

			@Override
			protected Void doInBackgroundThread(final Uri param) {
				try {
					if (player == null) {
						player = new MediaPlayer();
					}
					player.reset();
					player.setDataSource(context, param);
					player.setAudioStreamType(AudioManager.STREAM_MUSIC);
					player.prepare();
					if (!UIUtils.isDestroyed(context)) {
						player.start();
					}
				} catch (Exception e) {
					Log.e(TAG, "Unable to play pronounciation", e);
				} finally {
					if (pronunciationInProgress != null) {
						handler.post(new Runnable() {

							@Override
							public void run() {
								pronunciationInProgress.setVisibility(View.GONE);
							}
						});
					}
					synchronized (playMutex) {
						currentWordBeingPronounced = null;
					}
				}
				return null;
			}

		}, myUri);

	}

	public static void appendTranscription(final String transcription, final TextView wordTitle, final Context context) {
		Preconditions.checkNotNull(transcription);

		/** in some case it may already be prefixed with '[' */
		String finalTranscription = transcription.startsWith("[") ? " " + transcription + " " : " [" + transcription + "] ";
		wordTitle.append(CommonUtils.spanOfStyle(finalTranscription, context, R.style.transcription));
	}
}
